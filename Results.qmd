---
title: "Results: GLMM"
format: html
server: shiny
---

## Shiny Documents

This Quarto document is made interactive using Shiny. Interactive documents allow readers to modify parameters and see the results immediately. Learn more about Shiny interactive documents at <https://quarto.org/docs/interactive/shiny/>.

Import required packages
```{r}
library(readxl)
library(ggplot2)
library(lme4)
library(lmerTest)
library(DrugClust)
library(dplyr)
library(tidyverse)
library(shiny)
library(vegan)
library(data.table)
library(wPerm)
library(cowplot)
library(splancs)
```
Import Basking11 dataset
```{r}
Basking_11 <- read_excel("Basking_11.xlsx")
Basking_a<-subset(Basking_11, !(N_group>3))
Basking_a<-subset(Basking_a, ((Sub_type=='гравий')|(Sub_type=='кирпич')))
Basking_a<-subset(Basking_a, Sp=='D.armeniaca')
```
Additional data cleaning
```{r}
for (i in Basking_a$Sp_N){
temp<-subset(Basking_a$Sp_N, Basking_a$Sp_N==i)
if(length(temp)<5)Basking_a<-subset(Basking_a, !(Sp_N==i))}
for (i in Basking_a$Sp_N){
temp<-subset(Basking_a, Sp_N==i)
temp1<-subset(temp, N_group==1)
temp2<-subset(temp, N_group==2)
temp3<-subset(temp, N_group==3)
if(nrow(temp1)<5)Basking_a<-subset(Basking_a, !(Sp_N==i&N_group==1))
if(nrow(temp2)<5)Basking_a<-subset(Basking_a, !(Sp_N==i&N_group==2))
if(nrow(temp3)<5)Basking_a<-subset(Basking_a, !(Sp_N==i&N_group==3))
}
```
Add indicators
```{r}
Basking_a<-as.data.table(Basking_a)
Basking_a[, Sub_type_dummy:=setNames(c(0,1),c('гравий','кирпич'))[Sub_type]]
Basking_a[, Season_dummy:=setNames(c(0,1),c('autumn','spring'))[Season]]
Basking_a[, indicate2:=setNames(c(0,1,0),c('1','2','3'))[N_group]]
Basking_a[, indicate3:=setNames(c(0,0,1),c('1','2','3'))[N_group]]
Basking_a<-Basking_a[, c(3:4,6:9,11:13,17:21)]
Basking_a<-na.omit(Basking_a)
```
Model-2
```{r}
model2<-with(Basking_a, lmer(T_lizard~Sub_type+
Season+
as.character(N_group)+
N_total+
as.character(N_group)*T_air+
as.character(N_group)*T_sub+
as.character(N_group)*log(Delta_Time+1, exp(1))+
(1|Sp_N)+
(0+T_sub|Sp_N)+
(0+T_air|Sp_N)+
(0+log(Delta_Time+1, exp(1))|Sp_N), REML=FALSE)
)
```
Model-2 summary
```{r}
summary(model2)
confint(model2)
#R2
res<-residuals(model2)
   res_sq<-res^2
   ESS<-sum(res_sq)
   mn<-mean(Basking_a$T_lizard)
   res_sq<-(Basking_a$T_lizard-mn)^2
   TSS<-sum(res_sq)
   1-ESS/TSS
```
Data plotting
```{r}
ggplot(Basking_a, aes(T_sub, T_lizard, 
                      fill=as.character(N_group)))+
  geom_smooth(aes(colour=as.character(N_group)), se=FALSE, method='lm', fullrange=T)+
  geom_point(shape=21, size=2, alpha=.7)+
  theme_classic()+
  xlab('Температура субстрата')+
  ylab('Температура тела')+
  scale_fill_manual(values=c('grey70', "#00BE67","#F8766D"))+
  scale_colour_manual(values=c('grey70', "#00BE67","#F8766D"))+
  guides(fill=guide_legend(title = 'Ng', 
                           title.position = 'top'),
         colour=guide_legend(title = 'Ng', 
                           title.position = 'top'))
```
ML for model testing
```{r}
 matrix_of_p_values<-matrix(nrow=1, ncol = 16)
 colnames(matrix_of_p_values)<-c(rownames(summary(model2)[['coefficients']]),'iter')
 set.seed(179)
 new.seed<-runif(1000, 0, 10000)
 for(j in new.seed){
set.seed(j)
 folds<-CreateFolds(Basking_a, 10)
 Basking_a_folded<-cbind(Basking_a, folds)
 fold_nums<-c(0:9)
 for(i in fold_nums){
   model_f<-with(subset(Basking_a_folded, !(folds==i)), lmer(T_lizard~
Sub_type+ 
Season+
as.character(N_group)+
N_total+
as.character(N_group)*T_air+
as.character(N_group)*T_sub+
as.character(N_group)*log(Delta_Time+1, exp(1))+
(1|Sp_N)+
(0+T_sub|Sp_N)+
(0+T_air|Sp_N)+
(0+log(Delta_Time+1, exp(1))|Sp_N), REML=FALSE)
   )
   
predict_test<-predict(model_f, newdata=subset(Basking_a_folded, folds==i), allow.new.levels=TRUE)
   signif.codes<-vector()
   for (i in summary(model_f)[['coefficients']][,5]){
     if(i>=0.1)signif.codes<-append(signif.codes, '_')
     if(i<0.1&i>=0.05)signif.codes<-append(signif.codes, '.')
     if(i<0.05&i>=0.01)signif.codes<-append(signif.codes, '*')
     if(i<0.01&i>=0.001)signif.codes<-append(signif.codes, '**')
     if(i<0.001)signif.codes<-append(signif.codes, '***')
   }
   signif.codes<-append(signif.codes, j)
   matrix_of_p_values<- rbind(matrix_of_p_values, signif.codes )
 }}
 
 ### R squared for 100-time repeated 10-fold cross-validation
 matrix_of_R2<-matrix(ncol=3)
 colnames(matrix_of_R2)<-c('train', 'test','iter')
 for(j in new.seed){
   set.seed(j)
   folds<-CreateFolds(Basking_a, 10)
   Basking_a_folded<-cbind(Basking_a, folds)
   fold_nums<-c(0:9)
 
 for(i in fold_nums){
   model_f<-with(subset(Basking_a_folded, !(folds==i)), lmer(T_lizard~
Sub_type+
Season+
as.character(N_group)+
N_total+
as.character(N_group)*T_air+
as.character(N_group)*T_sub+
as.character(N_group)*log(Delta_Time+1, exp(1))+
(1|Sp_N)+
(0+T_sub|Sp_N)+
(0+T_air|Sp_N)+
(0+log(Delta_Time+1, exp(1))|Sp_N), REML=FALSE)
   )
   predict_test<-predict(model_f, newdata=subset(Basking_a_folded, folds==i), allow.new.levels=TRUE)
   R2<-vector()
   
   res<-residuals(model_f)
   res_sq<-res^2
   ESS<-sum(res_sq)
   mn<-mean(subset(Basking_a_folded, !(folds==i))$T_lizard)
   res_sq<-(subset(Basking_a_folded, !(folds==i))$T_lizard-mn)^2
   TSS<-sum(res_sq)
   
   R2<-append(R2, 1-ESS/TSS)
   
   res<-predict_test-subset(Basking_a_folded, folds==i)$T_lizard
   ESS<-sum(res^2)
   mn<-mean(subset(Basking_a_folded, folds==i)$T_lizard)
   TSS<-sum((subset(Basking_a_folded, folds==i)$T_lizard-mn)^2)
   R2<-append(R2, 1-ESS/TSS)
   R2<-append(R2, j)
   matrix_of_R2<-rbind(matrix_of_R2,R2)
 }}
 matrix_of_R2<-as.data.frame(matrix_of_R2)
 matrix_of_R2$delta<-matrix_of_R2$train-matrix_of_R2$test
 matrix_of_p_values<-as.data.frame(matrix_of_p_values)
 matrix_of_p_values<-cbind(matrix_of_p_values,matrix_of_R2$test)
 matrix_of_p_values<-na.omit(matrix_of_p_values)
 best50<-matrix_of_p_values[matrix_of_p_values$`matrix_of_R2$test`>=median(na.omit(matrix_of_p_values$`matrix_of_R2$test`)),]
 quantile(matrix_of_R2$delta, c(.025, .975), na.rm = TRUE)
 
```
Model coefficients
```{r}
 model.coefs<-matrix(nrow=1, ncol = 16)
 colnames(model.coefs)<-c(rownames(summary(model2)[['coefficients']]),'iter')
 #set.seed(179)
 #new.seed<-runif(1000, 0, 10000)
 for(j in new.seed){
set.seed(j)
 folds<-CreateFolds(Basking_a, 10)
 Basking_a_folded<-cbind(Basking_a, folds)
 fold_nums<-c(0:9)
 for(i in fold_nums){
   model_f<-with(subset(Basking_a_folded, !(folds==i)), lmer(T_lizard~
Sub_type+ 
Season+
as.character(N_group)+
N_total+
as.character(N_group)*T_air+
as.character(N_group)*T_sub+
as.character(N_group)*log(Delta_Time+1, exp(1))+
(1|Sp_N)+
(0+T_sub|Sp_N)+
(0+T_air|Sp_N)+
(0+log(Delta_Time+1, exp(1))|Sp_N), REML=FALSE)
   )
   
predict_test<-predict(model_f, newdata=subset(Basking_a_folded, folds==i), allow.new.levels=TRUE)
   signif.codes<-summary(model_f)[['coefficients']][,1]
   signif.codes<-append(signif.codes, j)
   model.coefs<- rbind(model.coefs, signif.codes )
 }}
 model.coefs<-na.omit(model.coefs)
 model.coefs<-cbind(model.coefs, matrix_of_R2$test)
 model.coefs<-as.data.frame(model.coefs)
```
Binary matrix of p-values and model quality control (mw-ANOVA)
```{r}
make_binary<-function(x)ifelse(x=='*'|x=='**'|x=='***', 1, 0)
#matrix_of_p_values<-read.csv('matrix_of_p_values_120623.csv')
#matrix_of_p_values<-matrix_of_p_values[,-1]
matrix_of_p_values1<- matrix_of_p_values[,1:15] %>% mutate_all(make_binary)
matrix_of_p_values1<-matrix_of_p_values1[,!(colMeans(matrix_of_p_values1)==1|colMeans(matrix_of_p_values1)==0)]
matrix_of_p_values1<- matrix_of_p_values1 %>% mutate(across(where(is.numeric), as.character))
matrix_of_p_values1<- cbind(matrix_of_p_values1, matrix_of_p_values[,16:17])
colnames(matrix_of_p_values1)<-c('(Intercept)',
                                'Sub_typeкирпич',
                                'as.character(N_group)2', 
                                'N_total',
                                'as.character(N_group)2:T_air',
                                'as.character(N_group)3:T_air',
                                'as.character(N_group)2:T_sub',
                                'as.character(N_group)3:T_sub',
                                'as.character(N_group)3:log(Delta_Time + 1, exp(1))',
                                'iter',
                                'matrix_of_R2$test')
model.q.check<-with(matrix_of_p_values1,lm(`matrix_of_R2$test`~
                                             0+`(Intercept)`+
                                             `Sub_typeкирпич`+
                                             `as.character(N_group)2`+ 
                                              N_total +
                                             `as.character(N_group)2:T_air`+
                                             `as.character(N_group)3:T_air`+
                                             `as.character(N_group)2:T_sub`+
                                             `as.character(N_group)3:T_sub`+
                                        `as.character(N_group)3:log(Delta_Time + 1, exp(1))`))
summary(model.q.check)
matrix_of_p_values_binary<-matrix_of_p_values1
```
Mean delta CI
```{r}
matrix_of_R2<-read.csv('matrix_of_R2_120623.csv')
matrix_of_R2<-matrix_of_R2[!is.na(matrix_of_R2$train),] #ONLY RUN ONCE
set.seed(179)
 new.seed<-runif(10000, 0, 10000)
 means_delta<-c()
 for(j in new.seed){
 set.seed(j)
 folds<-CreateFolds(matrix_of_R2, 2)
 delta_folded<-data.frame(delta=matrix_of_R2$delta, folds=folds)
 means_delta<-append(means_delta, mean(delta_folded[folds==1,]$delta))
 }
 means_delta<-data.frame(mn=means_delta)
 norm<-rnorm(
         n = nrow(means_delta),
         mean = mean(means_delta$mn),
         sd = sd(means_delta$mn)
         )
means_delta<-cbind(means_delta, norm) 
```
ANOSIM (bad stuff)
```{r}
grouping_fun<-function(x)ifelse(x>median(matrix_of_p_values_binary$`matrix_of_R2$test`),'1','0')
matrix_of_p_values_binary<- matrix_of_p_values_binary %>% mutate(across(where(is.character), as.numeric))
matrix_of_p_values_binary_grouped<-matrix_of_p_values_binary %>% mutate(half=grouping_fun(`matrix_of_R2$test`))
#matrix_of_p_values_binary_grouped<-read.csv('matrix_of_p_values_binary_grouped_220623.csv') #
matrix_of_p_values_binary_grouped<-matrix_of_p_values_binary_grouped[,-1]
#matrix_of_p_values_binary_grouped<-matrix_of_p_values_binary_grouped[,-10]
set.seed(179)
aos<-anosim(matrix_of_p_values_binary_grouped[,-10], matrix_of_p_values_binary_grouped$half, 100)
```

Chi Square and Fisher
```{r}

matrix_of_p_values_binary_grouped<-read.csv('matrix_of_p_values_binary_grouped_220623.csv')
matrix_of_p_values_binary_grouped<-matrix_of_p_values_binary_grouped[,-1]
#matrix_of_p_values_binary_grouped<-matrix_of_p_values_binary_grouped[,-10]
setDT(matrix_of_p_values_binary_grouped)
PDF<-matrix_of_p_values_binary_grouped[, lapply(.SD,sum), by=half]

#Chi-square
chisq.test(PDF[, half:=NULL])#p-value < 2.2e-16

#Fisher
for(i in 1:length(colnames(PDF))){
 PDF<-as.matrix(PDF)
 print(colnames(PDF)[i])
 mat<-matrix(c(PDF[1,i], PDF[2,i], 10000, 10000), nrow=2)
 print(fisher.test(mat)['p.value'])
}

```
Plots
Fig.2
```{r}
library(readxl)
anus <- read_excel("Basking_12.xlsx", sheet = "CloacalSurface")
View(anus)
ggplot(anus, aes(T_clo, T_sur))+geom_smooth(method=lm, colour='grey40')+geom_point(colour='#11ee22', alpha=0.7,size=2.5)+geom_point(shape=1, size=3)+theme(panel.border = element_rect(size=1, fill=NA), panel.background = element_rect(fill=NA), axis.title = element_text(size=16))+xlab('Cloacal body temperature, ºC')+ylab('Surface body temperature, ºC')
with(anus, cor.test(T_clo, T_sur, method = 'spearman'))
with(anus, lm(T_sur~T_clo))
```
Train-test density plot (Fig.3?)
```{r}
Fig2a<-ggplot(matrix_of_R2)+
  geom_histogram(aes(train), fill='#ff3333', alpha=0.6, bins=100)+
  geom_histogram(aes(test), fill='#1177ff', alpha=0.6, bins = 100)+
  theme_classic()+
  theme(axis.title = element_text(size = 16),
        plot.title = element_text(size=16, face='bold', hjust=.97, vjust = -7))+
  xlab(expression(R^2))+
  ylab('N of iterations')+
  ggtitle('A')

Fig2b<-ggplot(matrix_of_R2)+
  geom_histogram(aes(delta), fill='#33ee77', alpha=0.6, bins=100)+
  theme_classic()+
  theme(axis.title = element_text(size = 16),
        plot.title = element_text(size=16, face='bold', hjust=.97, vjust = -7))+
  xlab(expression(Train ~R^2 - Test ~R^2))+
  ylab('N of iterations')+
  ggtitle('B')

Fig2d<-ggplot(matrix_of_R2, aes(train, test))+
  geom_point(shape = 21
             )+
  #geom_smooth(se=T, colour='#EE5533')+
  theme_classic()+
  theme(axis.title = element_text(size=16),
        plot.title = element_text(size=16, face='bold', hjust=.97, vjust = -7))+
  xlab(expression(Train ~R^2))+
  ylab(expression(Test ~R^2))+
  ggtitle('D')

means_delta$alpha<-'0'
for(i in 1:nrow(means_delta)){
  if(means_delta$mn[i]>mean(means_delta$mn)+1.96*sd(means_delta$mn) |
     means_delta$mn[i]<mean(means_delta$mn)-1.96*sd(means_delta$mn)
     ){
    means_delta$alpha[i]<-'1'
  }
}
Fig2c<- ggplot(means_delta)+
  geom_histogram(aes(mn, fill = alpha),
                 bins = 30,
                 colour = 'gray20')+
  geom_density(aes(norm), adjust =2)+
  theme_classic()+
  theme(axis.title = element_text(size=16),
        legend.position = 'none',
        plot.title = element_text(size=16, face='bold', hjust=.97, vjust = -7))+
  xlab('Mean difference')+
  ylab('')+
  scale_fill_manual(values = c('gray70', '#ff3333'))+
  ggtitle('C')

leg.data<-data.frame(val = rep(c(1,0), 5), grp = rep(c('Train', 'Test'), 5))
leg.plot<-ggplot(leg.data, aes(val, fill=grp))+
  geom_histogram()+
  theme_classic()+
  theme(legend.title = element_blank(), legend.text = element_text(size=14))+
  scale_fill_manual(values = c('#1177ff', '#ff3333'))
leg<-get_legend(leg.plot)

plot_grid(Fig2a, Fig2b, Fig2c, Fig2d, align = 'hv')+
  draw_plot(leg, x=0.02, y=0.8, width=1/6, height=0.2)
```
Table1
```{r}
coefs<-as.data.frame(summary(model2)['coefficients'])
coefst<-as.data.frame(t(coefs))
coefst<-coefst[c(1,5),]
write_csv(coefst,'Table1.csv')
```
Plots
```{r}
ggplot(Basking_a, aes(T_lizard, fill=Season))+geom_density(alpha=0.5)
ggplot(Basking_a, aes(T_sub, fill=Season))+geom_density(alpha=0.5)
ggplot(Basking_a, aes(T_air, fill=Season))+geom_density(alpha=0.5)
ggplot(Basking_a, aes(log(1+Delta_Time, exp(1)), T_lizard, colour=Season))+geom_point()
ggplot(Basking_a, aes(log(1+Delta_Time, exp(1)), T_sub, colour=Season))+geom_point()
ggplot(matrix_of_R2, aes(delta))+geom_histogram(bins=20)
ggplot(Basking_a, aes(T_sub, T_lizard, colour=Sp_N))+geom_point()+geom_smooth(se=FALSE, method=lm)

```
Sup1
```{r}
matrix_of_R2<-read.csv('matrix_of_R2_120623.csv')
matrix_of_R2<-matrix_of_R2[!is.na(matrix_of_R2$train),] #ONLY RUN ONCE
matrix_of_p_values_binary<-read.csv('matrix_of_p_values_binary_grouped_220623.csv')
matrix_of_p_values<-read.csv('matrix_of_p_values_120623.csv')

matrix_of_p_values_binary[matrix_of_p_values_binary == 1]<-'Significant'
matrix_of_p_values_binary[matrix_of_p_values_binary == '0']<-'Non-significant'
matrix_of_p_values_binary<-cbind(matrix_of_p_values_binary, matrix_of_R2)

Sup1.a<-ggplot(matrix_of_p_values_binary[,-1], 
       aes(train, test,
           colour=as.character(X.Intercept.)))+
  geom_point(shape = 21)+
  theme_classic()+
  theme(axis.title = element_text(size=16), legend.title = element_blank(),
        plot.title = element_text(size=16, face='bold', hjust=.97, vjust = -7))+
  xlab('')+
  ylab(expression(Test ~R^2))+
  ggtitle('A')+
  guides(colour = 'none')

Sup1.b<-ggplot(matrix_of_p_values_binary[,-1], 
       aes(train, test,
           colour=as.character(Sub_typeкирпич)))+
  geom_point(shape = 21)+
  theme_classic()+
  theme(axis.title = element_text(size=16), legend.title = element_blank(),
        plot.title = element_text(size=16, face='bold', hjust=.97, vjust = -7))+
  xlab('')+
  ylab('')+
  ggtitle('B')+
  guides(colour = 'none')

Sup1.c<-ggplot(matrix_of_p_values_binary[,-1], 
       aes(train, test,
           colour=as.character(as.character.N_group.2)))+
  geom_point(shape = 21)+
  theme_classic()+
  theme(axis.title = element_text(size=16), legend.title = element_blank(),
        plot.title = element_text(size=16, face='bold', hjust=.97, vjust = -7))+
  xlab('')+
  ylab('')+
  ggtitle('C')+
  guides(colour = 'none')

Sup1.d<-ggplot(matrix_of_p_values_binary[,-1], 
       aes(train, test,
           colour=as.character(N_total)))+
  geom_point(shape = 21)+
  theme_classic()+
  theme(axis.title = element_text(size=16), legend.title = element_blank(),
        plot.title = element_text(size=16, face='bold', hjust=.97, vjust = -7))+
  xlab('')+
  ylab(expression(Test ~R^2))+
  ggtitle('D')+
  guides(colour = 'none')

Sup1.e<-ggplot(matrix_of_p_values_binary[,-1], 
       aes(train, test,
           colour=as.character(as.character.N_group.2.T_air)))+
  geom_point(shape = 21)+
  theme_classic()+
  theme(axis.title = element_text(size=16), legend.title = element_blank(),
        plot.title = element_text(size=16, face='bold', hjust=.97, vjust = -7))+
  xlab('')+
  ylab('')+
  ggtitle('E')+
  guides(colour = 'none')

Sup1.f<-ggplot(matrix_of_p_values_binary[,-1], 
       aes(train, test,
           colour=as.character(as.character.N_group.3.T_air)))+
  geom_point(shape = 21)+
  theme_classic()+
  theme(axis.title = element_text(size=16), legend.title = element_blank(),
        plot.title = element_text(size=16, face='bold', hjust=.97, vjust = -7),
        legend.text = element_text(size=14))+
  xlab('')+
  ylab('')+
  ggtitle('F')+
  guides(color = guide_legend(override.aes = list(size = 5)))

leg<-get_legend(Sup1.f)
Sup1.f<-Sup1.f+guides(colour = 'none')

Sup1.g<-ggplot(matrix_of_p_values_binary[,-1], 
       aes(train, test,
           colour=as.character(as.character.N_group.2.T_sub)))+
  geom_point(shape = 21)+
  theme_classic()+
  theme(axis.title = element_text(size=16), legend.title = element_blank(),
        plot.title = element_text(size=16, face='bold', hjust=.97, vjust = -7))+
  xlab(expression(Train ~R^2))+
  ylab(expression(Test ~R^2))+
  ggtitle('G')+
  guides(colour = 'none')

Sup1.h<-ggplot(matrix_of_p_values_binary[,-1], #!
       aes(train, test,
           colour=as.character(as.character.N_group.3.T_sub)))+
  geom_point(shape = 21)+
  theme_classic()+
  theme(axis.title = element_text(size=16), legend.title = element_blank(),
        plot.title = element_text(size=16, face='bold', hjust=.97, vjust = -7))+
  xlab(expression(Train ~R^2))+
  ylab('')+
  ggtitle('H')+
  guides(colour = 'none')

Sup1.i<-ggplot(matrix_of_p_values_binary[,-1], #!
       aes(train, test,
           colour=as.character(as.character.N_group.3.log.Delta_Time...1..exp.1..)))+
  geom_point(shape = 21)+
  theme_classic()+
  theme(axis.title = element_text(size=16), legend.title = element_blank(),
        plot.title = element_text(size=16, face='bold', hjust=.97, vjust = -7))+
  xlab(expression(Train ~R^2))+
  ylab('')+
  ggtitle('I')+
  guides(colour = 'none')

plot_grid(Sup1.a, Sup1.b, Sup1.c, NULL, 
          Sup1.d, Sup1.e, Sup1.f, NULL,
          Sup1.g, Sup1.h, Sup1.i, NULL,
          align = 'hv',
          rel_widths = rep(c(2,2,2, 1), 3),
          nrow = 3,
          ncol=4)+
  draw_plot(leg, x=6/7, y=1/3, width=1/7, height = 1/3)
```
Polygon
```{r}
polydf<-matrix(c(.917, .96,
                 .929, .95,
                 .936, .87,
                 .940, .78,
                 .917, .78,
                 .917, .96),
               ncol = 2,
               byrow = T)
polydf<-as.data.frame(polydf)

ggplot()+
    geom_point(data=matrix_of_p_values_binary[,-1], 
               aes(train, test,
                   colour=as.character(X.Intercept.)),
               shape = 21)+
    theme_classic()+
    theme(axis.title = element_text(size=16), legend.title = element_blank(),
          plot.title = element_text(size=16, face='bold', hjust=.97, vjust = -7))+
    xlab('')+
    ylab(expression(Test ~R^2))+
    ggtitle('A')+
    guides(colour = 'none')+geom_polygon(data=polydf, aes(V1, V2), alpha = .2)

isin<-inout(matrix_of_R2[, 2:3], polydf)

model_coef<-read.csv('model.coefs_120623.csv')
model_coef<-model_coef[-1,]
model_coef<-cbind(model_coef, isin)
model_coef$isin<-as.factor(model_coef$isin)
model_coef<-model_coef[, -c(1, 17)]

with(model_coef, lm(isin~X.Intercept.+
                      Sub_typeкирпич+
                      Seasonspring))
```
Don't know what is it
```{r}
matrix_of_R2<-read.csv('matrix_of_R2_120623.csv')
matrix_of_R2<-matrix_of_R2[!is.na(matrix_of_R2$train),]

matrix_of_R2$cluster<-'lower'
for(i in 1:nrow(matrix_of_R2)){
  if(-20*matrix_of_R2$train[i] + 17.55 > matrix_of_R2$train[i]){
    matrix_of_R2$cluster[i]<-'upper'
  }
}
```
Table S1
```{r}
matrix_of_p_values<-read.csv('matrix_of_p_values_120623.csv')
model.coefs<-read.csv('model.coefs_120623.csv')
model.coefs<-model.coefs[-1,]
cnames<-colnames(model.coefs)
cnames<-paste0(cnames, '_COEF')
colnames(model.coefs)<-cnames
  
make_binary<-function(x)ifelse(x=='*'|x=='**'|x=='***', 1, 0)
make_binary2<-function(x)ifelse(x>0, 1, 0)

matrix_of_p_values<-matrix_of_p_values[,-1]
matrix_of_p_values<- matrix_of_p_values[,1:15] %>% mutate_all(make_binary)

model.coefs<- model.coefs[,2:16] %>% mutate_all(make_binary2)

signif.pos <- rep(0, 15)
signif.neg <- rep(0, 15)
nonsignif.pos <- rep(0, 15)
nonsignif.neg <- rep(0, 15)

for(i in 1:nrow(model.coefs)){
  for(j in 1:length(model.coefs)){
    if(model.coefs[i,j] == 1 & matrix_of_p_values[i,j] == 1)signif.pos[j]<-signif.pos[j]+1
    ##//////////////##
    else if(model.coefs[i,j] == 0 & matrix_of_p_values[i,j] == 1)signif.neg[j]<-signif.neg[j]+1
    ##/////////////##
    if(model.coefs[i,j] == 1 & matrix_of_p_values[i,j] == 0)nonsignif.pos[j]<-nonsignif.pos[j]+1
    ##//////////////##
    else if(model.coefs[i,j] == 0 & matrix_of_p_values[i,j] == 0)nonsignif.neg[j]<-nonsignif.neg[j]+1
  }
}

tabS1<-rbind(signif.pos, signif.neg, nonsignif.pos, nonsignif.neg)
```